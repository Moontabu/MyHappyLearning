本周总结2021.6.7~2021.6.13  
--------------------------
本周我们开始学习了自己独立写一个完成的游戏，我给它取名叫copygame，因为是模仿抖音上看到的一个游戏。  
在制作游戏的过程中，我感受到了自己代码这块知识的薄弱和实际操作少的弊端。每一种情况我都还需要去查阅资料，理解网上别人的代码。有点不知道这种困境该怎么去解决，还是要多练习吗？但是在练习的时候很多也看不懂...
哎...  
除了自己独立开始制作游戏之外，也学习了一些新的知识：  
 
 Dotween的用法
-------------
Dotween是一个非常方便的方法，目前我自己所了解到的和使用到的只有物体的移动，但是不得不说比之前没用这个方法的时候好理解也方便简洁很多，虽然目前我使用的很少，但是通过查阅资料，总结了一下几点：  

一、移动动画
--------

创建一个小球，位置设为世界坐标原点（0，0，0），挂上此脚本：  
``` 
using DG.Tweening; //引入命名空间  
public class DOTWeenTest : MonoBehaviour  
{  
  void Start()  
    {  
        transform.DOMove(new Vector3(4, 3, 0), 3); //脚本物体3秒从当前位置移动到世界坐标(4,3,0)位置
    }
}
```  
**值得注意和记忆的点是：格式是（voctor3（目标终点），运动所需时间）， 
且我们的动画只会播放一次**
> **DOMove的其他相关方法：**

> a.世界坐标上移动：transform.DOMove  
b.本地坐标上移动：transform.DOLocalMove  
c.世界坐标的X轴上移动：transform.DOMoveX  
d.本地坐标的X轴上移动：transform.DOLocalMoveX  

除了这些，也有在网上找到的一些关于Dotween的其他知识， ：  
图片  
图片  
图片


二、From()方法的使用
--------------------

2秒时间从世界坐标（2，2，0）处回到自身当前位置：
```

transform.DOMove(new Vector3(2, 2, 0), 1).From();
```

从以自身为原点的坐标系（2，2，0）处回到自身当前位置：
```

transform.DOMove(new Vector3(2, 2, 0), 2).From(true);
```  
fromd的意思就是，给了我们目标对象一个方向，控制它的移动。  

三、动画正放与倒放
------------------

1.场景中创建两个按钮，来控制动画的播放顺序：

2.为小球挂上脚本：   
```

using DG.Tweening; //引入命名空间
public class DOTWeenTest : MonoBehaviour
{
    Tweener twe; //声明一个Tweener对象
    void Start()
    { 
        twe = transform.DOMove(new Vector3(3, 4, 0), 2);//将动画保存在Tweener对象中 
        twe.Pause();//暂停,防止自动播放  
        twe.SetAutoKill(false);//关闭动画自动销毁  
    }
    //创建两个方法事件,控制前放后倒放
    public void Forward()
    {
        twe.PlayForward(); //该动画正放
    }
    public void Back()
    {
        twe.PlayBackwards(); //该动画倒放
    }
}
```

3.将两个方法分别挂在各自按钮上，运行程序：
当点击了前放后才能倒放，也就是说不能一上来就倒放。

**其它方法：**

>Pause()： 暂停动画

>SetLoops(3)： 循环3次

四、设置动画曲线
----------------

物体在播放移动动画时速度是由快到慢，这种现象是由动画播放时的动画曲线决定的，可以通过修改动画曲线来改变物体动画效果的，比如我们可以将运动效果改成由慢到快，加上上周老师讲的方法，我一共总结了两种方式改变运动速度：   
1、代码
```
void Start()
{
    Tweener twe = transform.DOMoveX(5, 2); //3秒时间在世界坐标中,让X轴移动到5的位置
    twe.SetEase(Ease.InCubic); //由慢到快
}
```  
**动画曲线组件提供了很多种，可以根据需求选择。**

2、手动设置运动曲线  
在Dotween组件中，除了组件给我们设置好了的一些运动曲线之外，如果我们自己有特殊要求，还能自己动手DIY，我们可以通过拉扯曲线的方式手动设置运动的速度变化，类似于我们在设置声音和动画节点的方式来调整（此为老师讲的方式）。  
  
除此之外我在网站、知乎上面还学习和总结了另外一些C#的基础知识：  

1 C#的类型转换
-----------------  
* **隐式类型转换** - 这些转换是 C# 默认的以安全方式进行的转换, 不会导致数据丢失。例如，从小的整数类型转换为大的整数类型，从派生类转换为基类。  

* **显式类型转换** - 显式类型转换，即强制类型转换。显式转换需要强制转换运算符，而且强制转换会造成数据丢失。  

>我总结了几个常用的转换：  

>**ToBoolean**
：如果可能的话，把类型转换为布尔型。  

>**ToByte**
：把类型转换为字节类型。  

>**ToChar**
：如果可能的话，把类型转换为单个 Unicode（统一的字符编码标准） 字符类型。  

>**ToDateTime**
：把类型（整数或字符串类型）转换为 日期-时间 结构。  

>**ToDouble**
：把类型转换为双精度浮点型。  

>**ToString**
：把类型转换为字符串类型。  

>**ToType**
：把类型转换为指定类型。   

举例：  
```
namespace TypeConversionApplication
{
    class StringConversion
    {
        static void Main(string[] args)
        {
            int i = 75;
            float f = 53.005f;
            double d = 2345.7652;
            bool b = true;

            Console.WriteLine(i.ToString());// 显示结果为75
            Console.WriteLine(f.ToString());// 显示结果为53.005
            Console.WriteLine(d.ToString());// 显示结果为2345.7652
            Console.WriteLine(b.ToString());// 显示结果为true
            Console.ReadKey();
           
        }
    }
}
  ```  
 2）unity界面小技巧
 ------------------
 *  **延迟销毁游戏对象**  
 
之前的游戏实践中，我一般使用Destroy()方法立即销毁游戏对象，如果想延迟一段时间再销毁，可以在此方法中传递一个时间参数，如下：
```
Destroy(gameObject,2f);//延迟两秒后再销毁对象
 ```  
 * **F与Shift+F** 
 
选择游戏对象，按下F键，这个游戏对象会出现在我们窗口的正中央；按下Shift+F，可锁定这个游戏对象，不论如何移动这个游戏对象始终会保持在窗口中间。

* **反向播放动画**  

在Animator窗口中，设置动画的Speed属性为-1可使动画片段反向播放。    

* **对齐Scene与Game视图**  
 
在Hierarchy中选择摄像机，按下Ctrl+Shift+F，可以直接在game窗口中显示scene中我们调到的画面（这个超级实用！嘿嘿！）。  

* **展开/折叠所有节点**  

在Hierarchy面板中，按下Alt键，鼠标左键点击节点，可展开/折叠当前节点下的所有子节点。（这个在之前的unity官方教程中也有教过的）  

* **保存编辑器窗口布局**  
 
Unity窗口布局调整完毕以后，如果希望以后继续沿用此布局，点击编辑器右上角的Layout下拉列表，选择命令Save Layout，可将当前窗口布局进行保存。  

* **开关场景特效** 

在Scene面板顶部的图标【两层托托加个星星】中，点击旁边的三角形列表，可选择开关某种类型的特效，比如天空盒子等。

* **碰撞矩阵**  

在 Edit > Project Settings... > Physics 中，通过设置Layer Collision Matrix 可以决定能够互相碰撞的层，不需要碰撞的就去掉勾选即可。（周末刚刚用过这个）  

* **数值输入**

在涉及一些需要具体赋值的时候，不仅可以直接在框里输入数据，还可以在输入框中输入数学表达式，按下回车后Unity会将计算结果填充到输入框中，例如在transform中我们要设置X轴位置为90，可以输入30+30+30然后回车（这个方法是周末老师用了我发现的，然后自己验证了总结的）。  

* **逐帧查看程序运行**  

点击暂停按钮右侧的按钮（我们平时的暂停播放图标样式），可以在程序运行时逐帧查看程序运行状态。








本周期望老师讲解的知识：
==========================
* 想学在实践中遇到需要自动生成Prefab的方法及原理  
* 两个物体在都有Collider的情况下，不发生碰撞的解决方法  
